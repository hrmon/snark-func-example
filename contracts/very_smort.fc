#include "imports/stdlib.fc";

slice bls_g1_multiexp(slice x_1, int s_1, int n) asm "BLS_G1_MULTIEXP";
slice bls_g1_mul(slice x, int s) asm "BLS_G1_MUL";
slice bls_g1_add(slice x, slice y) asm "BLS_G1_ADD";
slice bls_g1_neg(slice x) asm "BLS_G1_NEG";
int bls_g1_ingroup(slice x) asm "BLS_G1_INGROUP";
int bls_g1_iszero(slice x) asm "BLS_G1_ISZERO";
slice bls_g1_zero() asm "BLS_G1_ZERO";
int bls_paireq(slice x_1, slice y_1, slice x_2, slice y_2, slice x_3, slice y_3, slice x_4, slice y_4, int n) asm "BLS_PAIRING";

const slice alpha  = "b73ed6ff7ad3b19bb42452a7b068b9596059e5a6b6bd616a88a76dbdf127c3216db113c4db7efe939025350ebbd1f44c"s;
const slice beta  = "86701f7b15a9bf29de2fd7cbcb78aa2868520bad305f829b335aba279df2f5a66dfc5f6da124a3b2b84584f63aedd792159e789827a0573536f7eb386c1e2c9b0cefeaf8389114a616eefd429256269fdaa245373c28d3f196c91ce699057339"s;
const slice gamma = "93e02b6052719f607dacd3a088274f65596bd0d09920b61ab5da61bbdc7f5049334cf11213945d57e5ac7d055d042b7e024aa2b2f08f0a91260805272dc51051c6e47ad4fa403b02b4510b647ae3d1770bac0326a805bbefd48056c8c121bdb8"s;
const slice delta = "a2ab34f50bd86bd263cb8f53e57bd29f2ca4cd94efcc845889fd726998e1153225f75c4bf2dad0c314f615effe976736116ab0ef04f1e837d9ab682f4d37e28c9e4a8154424be26ccd58b35200684231903595bece7ed5e6a246d331e9646180"s;

const slice IC0 = "90647f22d0a4414cee3403066a48a3fa1f4a28616765640488e68e28fdaea5b714654ec94ea1388e8bdf2794b1325b3b"s;
const slice IC1 = "b08c08befbf81e294a4d0a277ef1e12164b9efefeb0ae9f58931dc5f2d8e162d109fda76c59f89d30d5f4a7b842d301b"s;


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

}


int verify_proof(slice p_a, slice p_b, slice p_c, tuple pub_signals) method_id {
    int pus1 = pub_signals.first();
    var cpub = bls_g1_multiexp(
        IC1, pus1,
        1
    );
    pus1~dump();
    cpub = bls_g1_add(cpub, IC0);
    var np_a = bls_g1_neg(p_a);
    var res = bls_paireq(np_a , p_b, cpub , gamma, p_c , delta, alpha, beta, 4);
    return res;
}
